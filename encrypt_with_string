import hashlib
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import os

# 1. 生成16进制的AES-256密钥
def generate_key():
    hash_object = hashlib.sha256()
    hash_object.update("azmove".encode('utf-8'))
    key_hex = hash_object.hexdigest()
    # 将十六进制密钥转换为字节
    key = bytes.fromhex(key_hex)
    return key

# 2. 加密信息
def encrypt(plain_text, key):
    # 生成随机的IV（初始化向量）
    iv = os.urandom(16)
    # 创建AES-256-CBC加密器
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    # 对明文进行PKCS7填充
    padder = padding.PKCS7(128).padder()  # AES block size is 128 bits (16 bytes)
    padded_data = padder.update(plain_text.encode('utf-8')) + padder.finalize()
    # 加密填充后的数据
    ct = encryptor.update(padded_data) + encryptor.finalize()
    # 返回IV和密文的十六进制表示
    return '0x' + (iv + ct).hex()

# 3. 解密信息
def decrypt(cipher_text, key):
    # 将密文从十六进制转换为字节
    ct_bytes = bytes.fromhex(cipher_text[2:])  # 去除"0x"前缀
    iv = ct_bytes[:16]
    ct = ct_bytes[16:]
    # 创建AES-256-CBC解密器
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    # 解密密文
    padded_data = decryptor.update(ct) + decryptor.finalize()
    # 去除填充，获取原始明文
    unpadder = padding.PKCS7(128).unpadder()  # AES block size is 128 bits (16 bytes)
    plain_text = unpadder.update(padded_data) + unpadder.finalize()
    return plain_text.decode('utf-8')

# 示例使用
if __name__ == "__main__":
    key = generate_key()
    print("16进制密钥:", key.hex())

    # 测试加密和解密
    # test_text = "Hello, World!"
    encrypted = '0x encrypt data on blockchain'
    # print("加密后的密文:", encrypted)

    decrypted = decrypt(encrypted, key)
    print("\n解密后的明文:", decrypted)
